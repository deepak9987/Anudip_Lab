Lab1
package Demo;

/*Create a Bank class and declare an instance variable named amount of type double.Create parameterized constructor to initialize variable “amount” with value 10000.Create two methods withdraw(double withdrawalAmount) and deposit(double depositAmount).
Calculate withdrawal based on some condition (using ternary operator) like If amount is sufficient then “withdraw successful” message will be printed on the console and amount should be updated after withdraw. Later on, deposit 5000 in the account balance.
At the end display total balance on the console. String message = (withdrawalAmount <= amount) ? "Withdrawal successful" : "Insufficient balance";*/


public class Bank {
	double amount;
	 public Bank(double amount){
		 this.amount=amount;	
	 }
	 public void withdraw(double withdrawalAmount) {
		 String message = (withdrawalAmount <= amount) ? "Withdrawal successful" : "Insufficient balance";
		 if(withdrawalAmount<=amount) {
			 amount=amount-withdrawalAmount;
			 System.out.println(message);
		 }	 
	 }
	 public void deposit(double depositAmount) {
			 amount=amount+depositAmount;
			 System.out.println("Deposit of " + depositAmount + " successful.");
	 }
	 public void displayBalance() {
	        System.out.println("Total balance: " + amount);
	    }
	 
	public static void main(String[] args) {
		Bank myBank = new Bank(10000); 
        myBank.withdraw(3000); 
        myBank.deposit(5000);
        myBank.displayBalance();
	}

}


/*Withdrawal successful
Deposit of 5000.0 successful.
Total balance: 12000.0 */


package Demo;
import java.util.Scanner;

//Write a program to input two numbers and find the maximum between two numbers using the conditional/ternary operator. Sample Input: num1 = 10 num2 = 30

public class FindMaximum{
	public static void main(String[] args) {
		Scanner sc= new Scanner(System.in);
		
		System.out.println("Enter First number");
		int num1=sc.nextInt();
		System.out.println("Enter Sec number");
		int num2=sc.nextInt();
		int result = (num1>num2)? num1:num2;
		System.out.println("The Maximum number is: "  + result);
		
	}
}

/*Enter First number
10
Enter Sec number
30
The Maximum number is: 30*/


Lab2

package Demo;

import java.util.Scanner;

/*Write a program to check leap year using if else. How to check whether a given year
 is a leap year or not.*/


public class LeapYear {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        System.out.print("Enter a year to check if it's a leap year: ");
        int year = scanner.nextInt();
        
        if((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) {
            System.out.println(year + " is a leap year.");
        } else {
            System.out.println(year + " is not a leap year.");
        }
        
        scanner.close();
    }
}


/*Enter a year to check if it's a leap year: 2016
2016 is a leap year.*/

package Demo;

/*Write a program to check whether a number is a Strong number or not.
 Strong number is a special number whose sum of factorial of digits is equal to the
 original number.*/

import java.util.Scanner;

public class StrongNumber {

    // Method to calculate factorial of a digit
    public static int factorial(int n) {
        int fact = 1;
        for(int i = 1; i <= n; i++) {
            fact = fact * i;
        }
        return fact;
    }

    // Method to check if the number is a Strong number
    public static boolean isStrong(int num) {
        int originalNumber = num;
        int sum = 0;

        while(num > 0) {
            int digit = num % 10;
            sum += factorial(digit);
            num = num / 10;
        }

        return sum == originalNumber;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a number to check if it is a Strong number: ");
        int number = scanner.nextInt();

        if(isStrong(number)) {
            System.out.println(number + " is a Strong Number.");
        } else {
            System.out.println(number + " is not a Strong Number.");
        }

        scanner.close();
    }
}

/*Enter a number to check if it is a Strong number: 45
45 is not a Strong Number.*/

Lab3

package Demo;


/*create a program with a logic that throw 
 * the ArrayIndexOutOfBoundsException with accessing elements in a array.*/
public class ExceptionHandling {
    public static void main(String[] args) {
        // Declare and initialize an array with 5 elements
        int[] numbers = {10, 20, 30, 40, 50};

        // Valid access
        System.out.println("Element at index 2: " + numbers[2]); // prints 30

        // Invalid access: index 5 does not exist (valid indexes are 0 to 4)
        System.out.println("Element at index 5: " + numbers[5]);
    }
}

/*Element at index 2: 30
Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: Index 5 out of bounds for length 5
	at Javaprogram/Demo.ExceptionHandling.main(ExceptionHandling.java:13)*/


Lab4
/*A phone directory holds a list of names with a phone number for each name. It is possible to find the number associated with a given name, and to specify the phone number for a given name. 

 [Hint:use a HashMap to store names as keys and phone numbers as values. The user can choose to find a number by providing a name or add a new name with a phone number. The program runs in a loop until the user chooses to exit.]*/
import java.util.*;

public class PhoneDirectory {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        HashMap<String, String> directory = new HashMap<>();

        while (true) {
            System.out.println("\n===== Phone Directory Menu =====");
            System.out.println("1. Add Contact");
            System.out.println("2. Find Number by Name");
            System.out.println("3. Display All Contacts");
            System.out.println("4. Exit");
            System.out.print("Enter your choice: ");
            int choice = sc.nextInt();
            sc.nextLine();

            switch (choice) {
                case 1: 
                    System.out.print("Enter name: ");
                    String name = sc.nextLine();
                    System.out.print("Enter phone number: ");
                    String number = sc.nextLine();
                    directory.put(name, number);
                    System.out.println("Contact saved successfully!");
                    break;

                case 2: // Find Number
                    System.out.print("Enter name to search: ");
                    String searchName = sc.nextLine();
                    if (directory.containsKey(searchName)) {
                        System.out.println(searchName + " -> " + directory.get(searchName));
                    } else {
                        System.out.println(" Contact not found!");
                    }
                    break;

                case 3: // Display All
                    if (directory.isEmpty()) {
                        System.out.println(" Directory is empty.");
                    } else {
                        System.out.println("All Contacts:");
                        for (Map.Entry<String, String> entry : directory.entrySet()) {
                            System.out.println(entry.getKey() + " -> " + entry.getValue());
                        }
                    }
                    break;

                case 4: // Exit
                    System.out.println("Exiting Phone Directory. Goodbye!");
                    sc.close();
                    System.exit(0);

                default:
                    System.out.println(" Invalid choice! Try again.");
            }
        }
    }
}


/*
===== Phone Directory Menu =====
1. Add Contact
2. Find Number by Name
3. Display All Contacts
4. Exit
Enter your choice: 1
Enter name: Deepak 
Enter phone number: 9987076290
Contact saved successfully!

===== Phone Directory Menu =====
1. Add Contact
2. Find Number by Name
3. Display All Contacts
4. Exit*/




